Completed Code in the Learning Environment:

# Biodiversity Project
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species = pd.read_csv('species_info.csv')
print species.head()

species_count = species.scientific_name.nunique()
print species_count

species_type = species.category.unique()
print species_type

conservation_statuses = species.conservation_status.unique()
print conservation_statuses

conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed

# Inspected the Data Frame
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species = pd.read_csv('species_info.csv')
print species.head()

species_count = species.scientific_name.nunique()
print species_count

species_type = species.category.unique()
print species_type

conservation_statuses = species.conservation_status.unique()
print conservation_statuses

conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed

# Analyze Species Conservation Status
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species = pd.read_csv('species_info.csv')
print species.head()

species_count = species.scientific_name.nunique()
print species_count

species_type = species.category.unique()
print species_type

conservation_statuses = species.conservation_status.unique()
print conservation_statuses

conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed

# Analyze Conservation Status II
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species = pd.read_csv('species_info.csv')
print species.head()

species_count = species.scientific_name.nunique()
print species_count

species_type = species.category.unique()
print species_type

conservation_statuses = species.conservation_status.unique()
print conservation_statuses

conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed

#Plotting Conservation Status by Species
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

protection_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index().sort_values(by='scientific_name')
    
plt.figure(figsize=(10, 4))
ax = plt.subplot()
plt.bar(range(len(protection_counts)),protection_counts.scientific_name.values)
ax.set_xticks(range(len(protection_counts)))
ax.set_xticklabels(protection_counts.conservation_status.values)
plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
labels = [e.get_text() for e in ax.get_xticklabels()]
plt.show()

# Investigating Endangered Species
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

species['is_protected'] = species.conservation_status != 'No Intervention'

category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()

category_pivot = category_counts.pivot(columns='is_protected', index='category', values='scientific_name').reset_index()
  
category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)
print category_pivot

# Investigating Endangered Species II
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

species['is_protected'] = species.conservation_status != 'No Intervention'

category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()

category_pivot = category_counts.pivot(columns='is_protected', index='category', values='scientific_name').reset_index()
  
category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)
print category_pivot

# Chi-Squared Test for Significance
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt
from scipy.stats import chi2_contingency

contingency = [[30, 146], [75, 413]]

pval = chi2_contingency(contingency)[1]
print pval

contingency_reptile_mammal = [[5, 73], [30, 146]]
pval_reptile_mammal = chi2_contingency(contingency_reptile_mammal)[1]
print pval_reptile_mammal

# Final Thoughts on Protected Species
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt
from scipy.stats import chi2_contingency

contingency = [[30, 146], [75, 413]]

pval = chi2_contingency(contingency)[1]
print pval

contingency_reptile_mammal = [[5, 73], [30, 146]]
pval_reptile_mammal = chi2_contingency(contingency_reptile_mammal)[1]
print pval_reptile_mammal

# Observations DataFrame
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')

species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)

species_is_sheep = species[species.is_sheep]

sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

sheep_observations = observations.merge(sheep_species)
print sheep_observations.head()

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print obs_by_park

# In Search of Sheep
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')

species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)

species_is_sheep = species[species.is_sheep]

sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

sheep_observations = observations.merge(sheep_species)
print sheep_observations.head()

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print obs_by_park

# Merging Sheep and Observation DataFrames
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')

species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)

species_is_sheep = species[species.is_sheep]

sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

sheep_observations = observations.merge(sheep_species)
print sheep_observations.head()

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print obs_by_park

# Plotting Sheep Sightings
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)
sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

observations = pd.read_csv('observations.csv')

sheep_observations = observations.merge(sheep_species)

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()

plt.figure(figsize=(16, 4))
ax = plt.subplot()
plt.bar(range(len(obs_by_park)), obs_by_park.observations)
ax.set_xticks(range(len(obs_by_park)))
ax.set_xticklabels(obs_by_park.park_name.values)
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
plt.show()

# Foot and Mouth Reduction Effort - Sample Size Determination

baseline = 15

minimum_detectable_effect = 100 * 5 / 15
print minimum_detectable_effect

sample_size_per_variant = 520

yellowstone_weeks_observing = 520 / 507
print yellowstone_weeks_observing

bryce_weeks_observing = 520 / 250
print bryce_weeks_observing



